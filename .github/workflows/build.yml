name: Build
on:
  workflow_dispatch:
  push:
    branches: [ master, "release/**" ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read

jobs:
  linux:
    name: Linux
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install zlib1g-dev libbz2-dev

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Prepare
        run: ./autogen.sh

      - name: Configure
        run: ./configure --enable-jit --enable-pcre2-16 --enable-pcre2-32 --enable-pcre2grep-libz --enable-pcre2grep-libbz2

      - name: Build
        run: make -j3 CPPFLAGS='-Wall -Wextra -Werror'

      - name: Test (main test script)
        run: ./RunTest

      - name: Test (JIT test program)
        run: ./pcre2_jit_test

      - name: Test (pcre2grep test script)
        run: ./RunGrepTest

      - name: Test (pcre2posix program)
        run: ./pcre2posix_test -v

  alpine:
    name: alpine
    runs-on: ubuntu-latest
    container: alpine
    steps:
      - name: Setup
        run: apk add --no-cache automake autoconf gcc libtool make musl-dev git zlib zlib-dev bzip2 bzip2-dev #musl-locales

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Prepare
        run: ./autogen.sh

      - name: Configure
        run: ./configure --enable-jit --enable-pcre2-16 --enable-pcre2-32 --enable-pcre2grep-libz --enable-pcre2grep-libbz2

      - name: Build
        run: make -j3 CPPFLAGS='-Wall -Wextra -Werror'

      - name: Test (main test script)
        run: ./RunTest

      - name: Test (JIT test program)
        run: ./pcre2_jit_test

      - name: Test (pcre2grep test script)
        run: ./RunGrepTest

      - name: Test (pcre2posix program)
        run: ./pcre2posix_test -v

  macos:
    name: macOS universal
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Configure
        run: cmake -DPCRE2_SUPPORT_JIT=ON -DPCRE2_BUILD_PCRE2_16=ON -DPCRE2_BUILD_PCRE2_32=ON -DPCRE2_SUPPORT_LIBZ=ON -DPCRE2_SUPPORT_LIBBZ2=ON -DCMAKE_OSX_ARCHITECTURES='arm64;x86_64' -DCMAKE_C_FLAGS='-Wall -Wextra' -DCMAKE_COMPILE_WARNING_AS_ERROR=ON -DCMAKE_BUILD_TYPE=Release -B build

      - name: Build
        run: cd build && make -j3

      - name: Test
        run: cd build && ctest -j3 --output-on-failure

  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: ["Win32", "x64"]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Configure
        run: cmake -DPCRE2_SUPPORT_JIT=ON -DPCRE2_BUILD_PCRE2_16=ON -DPCRE2_BUILD_PCRE2_32=ON -DCMAKE_COMPILE_WARNING_AS_ERROR=ON -B build -A ${{ matrix.arch }}

      - name: Build
        run: cmake --build build --config Release

      - name: Test
        run: cd build && ctest -C Release -j3 --output-on-failure

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install zlib1g-dev libbz2-dev libedit-dev

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          submodules: true

      - name: Configure
        run: CC="clang -fprofile-instr-generate -fcoverage-mapping" cmake -DCMAKE_BUILD_TYPE=Debug -DPCRE2_SUPPORT_JIT=ON -DPCRE2_BUILD_PCRE2_16=ON -DPCRE2_BUILD_PCRE2_32=ON -DPCRE2_SUPPORT_LIBZ=ON -DPCRE2_SUPPORT_LIBBZ2=ON -DPCRE2_SUPPORT_LIBEDIT=ON -DPCRE2_SUPPORT_LIBREADLINE=OFF -B build

      - name: Build
        run: cd build && make -j3

      - name: Test
        run: cd build && LLVM_PROFILE_FILE="coverage-%m.profraw" ctest -j1 --output-on-failure

      - name: Report
        run: |
          LLVM_VER=`clang --version | head -n1 | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' | cut -d. -f1`
          echo "Using LLVM version $LLVM_VER"

          # Merge the profiles gathered
          cd build
          llvm-profdata-$LLVM_VER merge -sparse coverage-*.profraw -o coverage.profdata

          # Output HTML, for archiving and browsing later
          llvm-cov-$LLVM_VER show \
            -format=html -output-dir=coverage-report -show-line-counts-or-regions -show-branches=percent \
            -instr-profile=coverage.profdata \
            ./pcre2test -object ./pcre2grep -object ./pcre2posix_test -object ./pcre2_jit_test \
            ../src/ ./

          # Output LCOV-compatible output, for downstream tools
          llvm-cov-$LLVM_VER export \
            -format=lcov \
            -instr-profile=coverage.profdata \
            ./pcre2test -object ./pcre2grep -object ./pcre2posix_test -object ./pcre2_jit_test \
            ../src/ ./ \
            > ./coverage-lcov.info

          # Output text summary to build log
          echo '```' > "$GITHUB_STEP_SUMMARY"
          llvm-cov-$LLVM_VER report \
            -instr-profile=coverage.profdata \
            ./pcre2test -object ./pcre2grep -object ./pcre2posix_test -object ./pcre2_jit_test \
            ../src/ ./ \
            >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"

      - name: Upload report
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: "Coverage report"
          path: './build/coverage-report'
          if-no-files-found: error
